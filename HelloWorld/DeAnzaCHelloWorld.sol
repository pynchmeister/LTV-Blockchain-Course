// SPDX-License-Identifier: MIT
pragma solidity ^ 0.8.30;

// this is how you make single line comments

/* 
This is example is how to make multi line comments
This is second line of comment
*/

// define contract or name your contract as demonstrated on line 12
contract HelloWorldDeAnzaC {

    // string called message with its associated value
    // these are all key value pairs
    string message = "Hello Class";

    // state variables are declared outside fo functions at the cotract level
    // state variables are stored permanently on the blockchain (in contract storage)
    // they use gas to write or update
    uint public count; //<--state variable

    // visibility types control who can access or call variables and functions
    // public, can be accessed by anyone
    // external, the contract has a method that is callable from outside of this contract
    // internal, same as public, but cannot be called out side of this contract
    // private, it cannot be called in any way other than via a function in this contract

    uint public anotherNumber = 9; // accesible by any one
    uint private secret;    // internal use only

    function increment () public {} // callable by anyone
    function _reset () internal {}   // only callable inside this contract
    //I would like to ask why the "_reset" has the underscore in front

    // view vs pure functions
    // these keywords describe how a function interats with blockchain state
    function getCount() public view returns (uint) {
        return count;      //<---reads state
    }

    // uint, unsigned integer
        //uint is a data type used to store whole numbers that are always zero* 
            //^^---what does "always zero" mean
        // or positive
        // its size 256 bits
        // max value 2^256 -1
        uint256 public myNumber;
        uint public secondNumber = 25;
        uint public zero = 0;
        // int, stands for signed integer, which is a number that can be positive, negative or zero
        int public negativeNumber = -1;
        int public secondNegativeNumber = -2000;
        int public zeroNumber = 0;

        //bool, boolean, data that's either true or false, think boolean algebra/logic
        bool public isOpen = true;
        bool public isRaining = false;

        // address, special data type that holds a 20-byte (40 hexidecimal characters) Ethereum address
        // msg.sender refers to the address of the account (or contract) that called the current function
        address public owner = msg.sender;
        address public test = 0xE2DFC07f329041a05f5257f27CE01e4329FC64Ef; 
        /* noticed the address number couldn't be randome numbers I typed
         it truly needs to match the 20-byte (40 hexidecimal characters)
         but when counting the characters, I counted 42. Why?
        */
       
       // local variables are declred inside functions
       // they exist temporarily in memory during fucntion exectuion
       // do not cost gas unless used in transactions
       // Function to update the message
       function setMessage(string memory newMessage) public {
                message = newMessage;  
       }
 }

// Contract is compiled into Bytecode that the EVM understands
// 60806040526040518060400160405280600b81526020017f48656c6c6f20436c6173730000000000000000000000000000000000000000008152505f908161004791906103b9565b50600960025560196005555f6006557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6007557ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8306008555f6009556001600a5f6101000a81548160ff0219169083151502179055505f600a60016101000a81548160ff02191690831515021790555033600a60026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073e2dfc07f329041a05f5257f27ce01e4329fc64ef600b5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015610176575f5ffd5b50610488565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806101f757607f821691505b60208210810361020a576102096101b3565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261026c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610231565b6102768683610231565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6102ba6102b56102b08461028e565b610297565b61028e565b9050919050565b5f819050919050565b6102d3836102a0565b6102e76102df826102c1565b84845461023d565b825550505050565b5f5f905090565b6102fe6102ef565b6103098184846102ca565b505050565b5b8181101561032c576103215f826102f6565b60018101905061030f565b5050565b601f8211156103715761034281610210565b61034b84610222565b8101602085101561035a578190505b61036e61036685610222565b83018261030e565b50505b505050565b5f82821c905092915050565b5f6103915f1984600802610376565b1980831691505092915050565b5f6103a98383610382565b9150826002028217905092915050565b6103c28261017c565b67ffffffffffffffff8111156103db576103da610186565b5b6103e582546101e0565b6103f0828285610330565b5f60209050601f831160018114610421575f841561040f578287015190505b610419858261039e565b865550610480565b601f19841661042f86610210565b5f5b8281101561045657848901518255600182019150602085019450602081019050610431565b86831015610473578489015161046f601f891682610382565b8355505b6001600288020188555050505b505050505050565b6108ed806104955f395ff3fe608060405234801561000f575f5ffd5b50600436106100f3575f3560e01c8063a87d942c11610095578063c40026ed11610064578063c40026ed1461023f578063d09de08a1461025d578063e06bde4014610267578063f8a8fd6d14610285576100f3565b8063a87d942c146101c7578063aca20a5b146101e5578063b6c54e9714610203578063bc1b392d14610221576100f3565b806347535d7b116100d157806347535d7b1461014f57806369297e231461016d5780637cc5c1361461018b5780638da5cb5b146101a9576100f3565b806306661abd146100f757806323fd0e4014610115578063368b877214610133575b5f5ffd5b6100ff6102a3565b60405161010c9190610378565b60405180910390f35b61011d6102a9565b60405161012a9190610378565b60405180910390f35b61014d600480360381019061014891906104de565b6102af565b005b6101576102c1565b604051610164919061053f565b60405180910390f35b6101756102d3565b6040516101829190610378565b60405180910390f35b6101936102d9565b6040516101a09190610378565b60405180910390f35b6101b16102df565b6040516101be9190610597565b60405180910390f35b6101cf610305565b6040516101dc9190610378565b60405180910390f35b6101ed61030e565b6040516101fa91906105c8565b60405180910390f35b61020b610314565b60405161021891906105c8565b60405180910390f35b61022961031a565b6040516102369190610378565b60405180910390f35b610247610320565b604051610254919061053f565b60405180910390f35b610265610333565b005b61026f610335565b60405161027c91906105c8565b60405180910390f35b61028d61033b565b60405161029a9190610597565b60405180910390f35b60015481565b60045481565b805f90816102bd91906107e8565b5050565b600a5f9054906101000a900460ff1681565b60025481565b60055481565b600a60029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f600154905090565b60075481565b60085481565b60065481565b600a60019054906101000a900460ff1681565b565b60095481565b600b5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f819050919050565b61037281610360565b82525050565b5f60208201905061038b5f830184610369565b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6103f0826103aa565b810181811067ffffffffffffffff8211171561040f5761040e6103ba565b5b80604052505050565b5f610421610391565b905061042d82826103e7565b919050565b5f67ffffffffffffffff82111561044c5761044b6103ba565b5b610455826103aa565b9050602081019050919050565b828183375f83830152505050565b5f61048261047d84610432565b610418565b90508281526020810184848401111561049e5761049d6103a6565b5b6104a9848285610462565b509392505050565b5f82601f8301126104c5576104c46103a2565b5b81356104d5848260208601610470565b91505092915050565b5f602082840312156104f3576104f261039a565b5b5f82013567ffffffffffffffff8111156105105761050f61039e565b5b61051c848285016104b1565b91505092915050565b5f8115159050919050565b61053981610525565b82525050565b5f6020820190506105525f830184610530565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61058182610558565b9050919050565b61059181610577565b82525050565b5f6020820190506105aa5f830184610588565b92915050565b5f819050919050565b6105c2816105b0565b82525050565b5f6020820190506105db5f8301846105b9565b92915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061062f57607f821691505b602082108103610642576106416105eb565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026106a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610669565b6106ae8683610669565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6106e96106e46106df84610360565b6106c6565b610360565b9050919050565b5f819050919050565b610702836106cf565b61071661070e826106f0565b848454610675565b825550505050565b5f5f905090565b61072d61071e565b6107388184846106f9565b505050565b5b8181101561075b576107505f82610725565b60018101905061073e565b5050565b601f8211156107a05761077181610648565b61077a8461065a565b81016020851015610789578190505b61079d6107958561065a565b83018261073d565b50505b505050565b5f82821c905092915050565b5f6107c05f19846008026107a5565b1980831691505092915050565b5f6107d883836107b1565b9150826002028217905092915050565b6107f1826105e1565b67ffffffffffffffff81111561080a576108096103ba565b5b6108148254610618565b61081f82828561075f565b5f60209050601f831160018114610850575f841561083e578287015190505b61084885826107cd565b8655506108af565b601f19841661085e86610648565b5f5b8281101561088557848901518255600182019150602085019450602081019050610860565b868310156108a2578489015161089e601f8916826107b1565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220466af976e1d5119c2ed48a97b65957d3bf6326dae5fca1e3005a1ee94f1758ce64736f6c634300081e0033
 
